package com.worldpay.test.oferrial.domain;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;
import org.hibernate.validator.constraints.NotEmpty;

import javax.annotation.concurrent.Immutable;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.time.LocalDate;
import java.util.Optional;

import static com.worldpay.test.oferrial.domain.ModerationStatus.APPROVED;

@Immutable
public class OfferDetails extends ReflectionEqualsHashCodeToString {

    @NotNull
    @Valid
    @JsonProperty("id")
    private UniqueOfferId uniqueId = UniqueOfferId.autoGenerated();

    @JsonProperty
    @NotEmpty
    private String name;

    @JsonProperty("startDate")
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    private LocalDate startDate;

    @JsonProperty("expiryDate")
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    private LocalDate expiryDate;

    @JsonProperty
    @NotNull
    private Price price;

    @JsonInclude(Include.NON_EMPTY)
    @JsonProperty
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    private Optional<LocalDate> created = Optional.empty();

    @JsonInclude(Include.NON_EMPTY)
    @JsonProperty
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    private Optional<LocalDate> lastUpdated = Optional.empty();


    @JsonProperty
    private ModerationStatus moderationStatus = APPROVED;

    @JsonProperty(access = JsonProperty.Access.READ_ONLY)
    public Boolean isActive() {
        return LocalDate.now().isBefore(expiryDate)
                && LocalDate.now().isAfter(startDate)
                && moderationStatus == APPROVED;
    }

    @JsonCreator
    public OfferDetails(@JsonProperty("id") UniqueOfferId uniqueId,
                        @JsonProperty("name") String name,
                        @JsonProperty("startDate") LocalDate startDate,
                        @JsonProperty("expiryDate") LocalDate expiryDate,
                        @JsonProperty("price") Price price,
                        @JsonProperty("moderationStatus") ModerationStatus moderationStatus,
                        @JsonProperty("created") Optional<LocalDate> created,
                        @JsonProperty("updated") Optional<LocalDate> lastUpdated) {
        this.uniqueId = uniqueId;
        this.name = name;
        this.startDate = startDate;
        this.expiryDate = expiryDate;
        this.price = price;
        this.moderationStatus = moderationStatus;
        this.created = created;
        this.lastUpdated = lastUpdated;
    }

    public UniqueOfferId getUniqueId() {
        return uniqueId;
    }

    public String getName() {
        return name;
    }

    public LocalDate getStartDate() {
        return startDate;
    }

    public LocalDate getExpiryDate() {
        return expiryDate;
    }

    public Price getPrice() {
        return price;
    }

    public Optional<LocalDate> getCreated() {
        return created;
    }

    public Optional<LocalDate> getLastUpdated() {
        return lastUpdated;
    }

    public ModerationStatus getModerationStatus() {
        return moderationStatus;
    }

    public Builder builder() {
        return Builder.of(this);
    }

    public static class Builder {


        private UniqueOfferId uniqueId;
        private Price price;
        private String name;
        private LocalDate startDate;
        private LocalDate expiryDate;
        private ModerationStatus moderationStatus = APPROVED;

        private Optional<LocalDate> created = Optional.empty();
        private Optional<LocalDate> lastUpdated = Optional.empty();

        public Builder withUniqueId(UniqueOfferId uniqueId) {
            this.uniqueId = uniqueId;
            return this;
        }

        public Builder withName(String name) {
            this.name = name;
            return this;
        }

        public Builder withPrice(Price price) {
            this.price = price;
            return this;
        }

        public Builder withStartDate(LocalDate startDate) {
            this.startDate = startDate;
            return this;
        }

        public Builder withExpiryDate(LocalDate expiryDate) {
            this.expiryDate = expiryDate;
            return this;
        }

        public Builder withCreatedDate(Optional<LocalDate> createdDate) {
            this.created = createdDate;
            return this;
        }

        public Builder withUpdatedDate(Optional<LocalDate> updated) {
            this.lastUpdated = updated;
            return this;
        }

        public Builder withStatus(ModerationStatus moderationStatus) {
            this.moderationStatus = moderationStatus;
            return this;
        }


        private Builder() {
            //start method should be used
        }

        public static Builder start(UniqueOfferId uniqueId,
                                    Price price,
                                    String name,
                                    LocalDate startDate,
                                    LocalDate expiryDate) {
            return new Builder()
                    .withUniqueId(uniqueId)
                    .withPrice(price)
                    .withName(name)
                    .withStartDate(startDate)
                    .withExpiryDate(expiryDate);
        }


        public static Builder of(OfferDetails od) {
            return start(
                    od.getUniqueId(),
                    od.getPrice(),
                    od.getName(),
                    od.getStartDate(),
                    od.getExpiryDate())
                    .withCreatedDate(od.getCreated())
                    .withUpdatedDate(od.getLastUpdated());
        }

        public OfferDetails build() {
            return new OfferDetails(
                    uniqueId,
                    name,
                    startDate,
                    expiryDate,
                    price,
                    moderationStatus,
                    created,
                    lastUpdated);
        }
    }
}
